resource_types:
  - name: discord-resource
    type: registry-image
    source:
      repository: trivigy/discord-resource



resources:
  - name: dillo-bot
    type: git
    icon: github
    source:
      uri: ((github.uri))
      branch: ((github.branch))

  - name: notify
    type: discord-resource
    icon: discord
    source:
      token: ((concourse.discord.token))

  - name: dillo-bot-bucket
    type: s3
    icon: aws
    source:
      bucket: dillo-bot-bucket
      regexp: dillo-bot-(.*).jar
      access_key_id: ((aws.s3.key.id))
      secret_access_key: ((aws.s3.key.secret))
      region_name: us-east-2

  - name: dillo-bot-image
    type: docker-image
    icon: docker
    source: 
      username: ((docker.username))
      password: ((docker.password))
      repository: ((docker.username))/dillo-bot-image

  - name: version
    type: semver
    icon: aws
    source:
      initial_version: 0.0.1
      driver: s3
      bucket: dillo-bot-bucket
      key: version
      access_key_id: ((aws.s3.key.id))
      secret_access_key: ((aws.s3.key.secret))
      region_name: us-east-2



build_log_retention: &build_log_retention
  builds: 10
  minimum_succeeded_builds: 1

env_vars: &env_vars
  DISCORD_TOKEN: ((discord.token))
  DISCORD_CLIENT_ID: ((discord.client.id))
  GITHUB_TOKEN: ((github.token))



jobs:
  - name: run-dillo-bot
    serial: true
    build_log_retention: *build_log_retention
    plan:
      - get: dillo-bot

      - task: create-key
        file: dillo-bot/cicd/tasks/create-key.yml
        params:
          KEY: ((aws.ec2.key))

      - task: stop-container
        file: dillo-bot/cicd/tasks/stop-container.yml
        params:
          USER: ((aws.ec2.user))
          HOST: ((aws.ec2.public_dns))

      - task: start-container
        file: dillo-bot/cicd/tasks/start-container.yml
        params:
          USER: ((aws.ec2.user))
          HOST: ((aws.ec2.public_dns))
          DISCORD_TOKEN: ((discord.token))
          DISCORD_CLIENT_ID: ((discord.client.id))
          GITHUB_TOKEN: ((github.token))

  - name: update-pipeline
    serial: true
    build_log_retention: *build_log_retention
    plan:
      - get: dillo-bot
        trigger: true

      # - task: create-vars
      #   file: dillo-bot/cicd/tasks/create-vars.yml
      #   params:
      #     CONCOURSE_DISCORD_TOKEN: ((concourse.discord.token))
      #     CONCOURSE_DISCORD_CHANNEL: ((concourse.discord.channel))
      #     DISCORD_TOKEN: ((discord.token))
      #     DISCORD_CLIENT_ID: ((discord.client.id))
      #     GITHUB_URI: ((github.uri))
      #     GITHUB_BRANCH: ((github.branch))
      #     GITHUB_TOKEN: ((github.token))
      #     DOCKER_USERNAME: ((docker.username))
      #     DOCKER_PASSWORD: ((docker.password))
      #     S3_ACCESS_KEY_ID: ((aws.s3.key.id))
      #     S3_SECRET_ACCESS_KEY: ((aws.s3.key.secret))
      #     EC2_KEY: ((aws.ec2.key))
      #     EC2_USER: ((aws.ec2.user))
      #     EC2_PUBLIC_DNS: ((aws.ec2.public_dns))

      - set_pipeline: dillo-bot 
        file: dillo-bot/cicd/pipelines/pipeline.yml
        vars:
          concourse:
            discord:
              token: ((concourse.discord.token))
              channel: "((concourse.discord.channel))"
          discord:
            token: ((discord.token))
            client:
              id: "((discord.client.id))"
          github:
            uri: ((github.uri))
            branch: ((github.branch))
            token: ((github.token))
          docker:
            username: ((docker.username))
            password: ((docker.password))
          aws:
            s3:
              key:
                secret: ((aws.s3.key.secret))
                id: ((aws.s3.key.id))
            ec2:
              user: ((aws.ec2.user))
              public_dns: ((aws.ec2.public_dns))
              key: |
                ((aws.ec2.key))

        # var_files:
        #   - vars/set_pipeline-vars.yml


  - name: test-dillo-bot
    serial: true
    build_log_retention: *build_log_retention
    plan:
      - get: dillo-bot
        trigger: true

      - task: unit-test
        file: dillo-bot/cicd/tasks/unit-test.yml
        params: *env_vars
        on_failure:
          put: notify
          params:
            channel: ((concourse.discord.channel))
            title: FAIL
            message: |
              The new DilloBot failed his tests


  - name: build-dillo-bot
    serial: true
    build_log_retention: *build_log_retention
    plan:
      - get: dillo-bot
        passed: [test-dillo-bot]
        trigger: true

      - get: version
        params:
          bump: patch

      - task: build-jar
        file: dillo-bot/cicd/tasks/build-jar.yml
        params: *env_vars
        on_failure:
          put: notify
          params:
            channel: ((concourse.discord.channel))
            title: FAIL
            message: |
              Failed to build new DilloBot

      - put: version
        params:
          file: version/version

      - put: dillo-bot-bucket
        params:
          file: target/dillo-bot*.jar


  - name: containerize-dillo-bot
    serial: true
    build_log_retention: *build_log_retention
    on_success:
      put: notify
      params:
        channel: ((concourse.discord.channel))
        title: SUCCESS
        message: |
          New DilloBot has been containerized from s3

    on_failure:
      do:
        - task: copy-dockerfile-to-root
          file: dillo-bot/cicd/tasks/copy-dockerfile-to-root.yml

        - put: dillo-bot-image
          params:
            build: dillo-bot-dockerfile/
          on_success:
            put: notify
            params:
              channel: ((concourse.discord.channel))
              title: SUCCESS
              message: |
                New DilloBot has been containerized from source

    plan:
      - get: dillo-bot
        passed: [build-dillo-bot]
        trigger: true

      - get: dillo-bot-bucket
        passed: [build-dillo-bot]
        trigger: true

      - task: containerize-jar
        file: dillo-bot/cicd/tasks/containerize-jar.yml

      - put: dillo-bot-image
        params:
          build: docker/